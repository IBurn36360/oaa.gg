{"version":3,"sources":["Debug.js"],"names":["window","location","search","rootObjectName","__GRN","ready","constants","validateConsoleLevel","determineConsoleCallback","printCallTrace","formatModule","Debug","LOG_LEVEL_LOG","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","LOG_LEVEL_WARN","LOG_LEVEL_ERROR","level","keys","Object","i","j","length","console","info","bind","log","debug","warn","error","e","trace","module","trim","writeConsoleMessage","message","consoleLevel","includeTrace","writeConsoleObject","object","consoleCallback","writeConsoleTable","table","modulePrepared"],"mappings":"CAAE,WAEE,IAA6D,IAAzDA,OAAOC,SAASC,OAAOA,OAAO,sBAC9B,OAAO,EAGX,IAAIC,EAAiBH,OAAOI,MAE5BJ,OAAOG,GAAgBE,MAAM,WAaO,IACxBC,EAQAC,EAcAC,EAoDAC,EAIAC,EA/ERV,OAAOG,GAAgBQ,OACfL,GACAM,cAAmB,EACnBC,eAAmB,EACnBC,gBAAmB,EACnBC,eAAmB,EACnBC,gBAAmB,GAGnBT,EAAuB,SAAUU,GAKjC,IAJA,IAAIC,EAAOC,OAAOD,KAAKZ,GACnBc,EAAI,EACJC,EAAIH,EAAKI,OAELF,EAAIC,EAAGD,IACX,GAAId,EAAUY,EAAKE,MAAQH,EACvB,OAAOA,EAIf,OAAOX,EAAyB,eAGhCE,EAA2B,SAAUS,GAKrC,IACI,OAAQA,GACJ,KAAKX,EAA0B,eAE3B,OAAIN,OAAOuB,QAAQC,KACRxB,OAAOuB,QAAQC,KAAKC,KAAKzB,OAAOuB,SAEhCvB,OAAOuB,QAAQG,IAAID,KAAKzB,OAAOuB,SAI9C,KAAKjB,EAA2B,gBAE5B,OAAIN,OAAOuB,QAAQI,MACR3B,OAAOuB,QAAQI,MAAMF,KAAKzB,OAAOuB,SAEjCvB,OAAOuB,QAAQG,IAAID,KAAKzB,OAAOuB,SAI9C,KAAKjB,EAA0B,eAE3B,OAAIN,OAAOuB,QAAQK,KACR5B,OAAOuB,QAAQK,KAAKH,KAAKzB,OAAOuB,SAEhCvB,OAAOuB,QAAQG,IAAID,KAAKzB,OAAOuB,SAI9C,KAAKjB,EAA2B,gBAE5B,OAAIN,OAAOuB,QAAQM,MACR7B,OAAOuB,QAAQM,MAAMJ,KAAKzB,OAAOuB,SAEjCvB,OAAOuB,QAAQG,IAAID,KAAKzB,OAAOuB,SAI9C,QAEI,OAAOA,QAAQG,KAEzB,MAAMI,GACJ,OAAO9B,OAAOuB,QAAQG,IAAID,KAAKzB,OAAOuB,WAI1Cd,EAAiB,WACjBc,QAAQQ,SAGRrB,EAAe,SAAUsB,GACzB,MAAO,IAAMA,EAAOC,OAAS,MAY7BC,oBAAqB,SAAUC,EAASH,EAAQI,EAAcC,GAC1D7B,EAAyBD,EAAqB6B,GAA9C5B,EAA8D,EAAWE,EAAasB,GAAU,IAAM,IAAMG,GAExGE,GACA5B,KAYR6B,mBAAqB,SAAUC,EAAQP,EAAQI,EAAcC,GACzD,IAAIG,EAAkBhC,EAAyBD,EAAqB6B,IAEhEJ,GACAQ,EAAgB,UAAY9B,EAAasB,GAAU,WACnDQ,EAAgBD,GAChBC,EAAgB,UAAY9B,EAAasB,GAAU,aAEnDQ,EAAgB,wBAChBA,EAAgBD,GAChBC,EAAgB,yBAGhBH,GACA5B,KASRgC,kBAAqB,SAAUF,GAC3BhB,QAAQmB,MAAMH,IAElB3B,oBACI,OAAON,EAAyB,eAEpCO,qBACI,OAAOP,EAA0B,gBAErCQ,sBACI,OAAOR,EAA2B,iBAEtCS,qBACI,OAAOT,EAA0B,gBAErCU,sBACI,OAAOV,EAA2B,mBAK9CN,OAAOG,GAAgBwC,eAAe,WA7K7C","file":"Debug.js","sourcesContent":["!(function() {\n    // DO NOT register debug if the frame has it disengaged!\n    if (window.location.search.search(/(\\?|&)debug(=|&|$)/) === -1) {\n        return false;\n    }\n\n    var rootObjectName = window.__GRN;\n\n    window[rootObjectName].ready(function() {\n        /**\n         * @type {{\n         *   writeConsoleMessage: Function,\n         *   writeConsoleObject:  Function,\n         *   writeConsoleTable:   Function,\n         *   LOG_LEVEL_LOG:       Number,\n         *   LOG_LEVEL_INFO:      Number,\n         *   LOG_LEVEL_DEBUG:     Number,\n         *   LOG_LEVEL_WARN:      Number,\n         *   LOG_LEVEL_ERROR:     Number,\n         * }} window[rootObjectName].Debug\n         */\n        window[rootObjectName].Debug = (function () {\n            var constants = {\n                'LOG_LEVEL_LOG':   1,\n                'LOG_LEVEL_INFO':  2,\n                'LOG_LEVEL_DEBUG': 3,\n                'LOG_LEVEL_WARN':  4,\n                'LOG_LEVEL_ERROR': 5\n            };\n    \n            var validateConsoleLevel = function (level) {\n                var keys = Object.keys(constants),\n                    i = 0,\n                    j = keys.length;\n    \n                for (i; i < j; i++) {\n                    if (constants[keys[i]] === level) {\n                        return level;\n                    }\n                }\n    \n                return constants['LOG_LEVEL_LOG'];\n            };\n    \n            var determineConsoleCallback = function (level) {\n                // Alright...I need to explain this\n                // Due to limitations in FireFox and IOS, we need to do a lot here that doesn't seem necessary\n                // FireFox and IOS might not support some of the function levels\n                // IOS relies on \"this\" actually just being window.console and will cause type errors otherwise\n                try {\n                    switch (level) {\n                        case constants['LOG_LEVEL_INFO']:\n    \n                            if (window.console.info) {\n                                return window.console.info.bind(window.console);\n                            } else {\n                                return window.console.log.bind(window.console);\n                            }\n                            break;\n    \n                        case constants['LOG_LEVEL_DEBUG']:\n    \n                            if (window.console.debug) {\n                                return window.console.debug.bind(window.console);\n                            } else {\n                                return window.console.log.bind(window.console);\n                            }\n                            break;\n    \n                        case constants['LOG_LEVEL_WARN']:\n    \n                            if (window.console.warn) {\n                                return window.console.warn.bind(window.console);\n                            } else {\n                                return window.console.log.bind(window.console);\n                            }\n                            break;\n    \n                        case constants['LOG_LEVEL_ERROR']:\n    \n                            if (window.console.error) {\n                                return window.console.error.bind(window.console);\n                            } else {\n                                return window.console.log.bind(window.console);\n                            }\n                            break;\n    \n                        default:\n    \n                            return console.log;\n                    }\n                } catch(e) {\n                    return window.console.log.bind(window.console);\n                }\n            };\n    \n            var printCallTrace = function () {\n                console.trace();\n            };\n    \n            var formatModule = function (module) {\n                return '[' + module.trim() + ']';\n            };\n    \n            return {\n                /**\n                 * Writes a console message\n                 *\n                 * @param message\n                 * @param module\n                 * @param consoleLevel\n                 * @param includeTrace\n                 */\n                writeConsoleMessage: function (message, module, consoleLevel, includeTrace) {\n                    determineConsoleCallback(validateConsoleLevel(consoleLevel))(((module) ? formatModule(module) + ' ' : '') + message);\n    \n                    if (includeTrace) {\n                        printCallTrace();\n                    }\n                },\n    \n                /**\n                 * Writes a console object\n                 *\n                 * @param object\n                 * @param module\n                 * @param consoleLevel\n                 * @param includeTrace\n                 */\n                writeConsoleObject:  function (object, module, consoleLevel, includeTrace) {\n                    var consoleCallback = determineConsoleCallback(validateConsoleLevel(consoleLevel));\n    \n                    if (module) {\n                        consoleCallback('------ ' + formatModule(module) + ' ------');\n                        consoleCallback(object);\n                        consoleCallback('------ ' + formatModule(module) + ' ------');\n                    } else {\n                        consoleCallback('------ ------ ------');\n                        consoleCallback(object);\n                        consoleCallback('------ ------ ------');\n                    }\n    \n                    if (includeTrace) {\n                        printCallTrace();\n                    }\n                },\n    \n                /**\n                 * Writes an object to the console as a table\n                 *\n                 * @param object\n                 */\n                writeConsoleTable:   function (object) {\n                    console.table(object);\n                },\n                get LOG_LEVEL_LOG() {\n                    return constants['LOG_LEVEL_LOG'];\n                },\n                get LOG_LEVEL_INFO() {\n                    return constants['LOG_LEVEL_INFO'];\n                },\n                get LOG_LEVEL_DEBUG() {\n                    return constants['LOG_LEVEL_DEBUG'];\n                },\n                get LOG_LEVEL_WARN() {\n                    return constants['LOG_LEVEL_WARN'];\n                },\n                get LOG_LEVEL_ERROR() {\n                    return constants['LOG_LEVEL_ERROR'];\n                }\n            }\n        }());\n    \n        window[rootObjectName].modulePrepared('Debug');\n    });\n}());\n"]}