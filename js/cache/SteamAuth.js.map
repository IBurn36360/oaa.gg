{"version":3,"sources":["SteamAuth.js"],"names":["rootObjectName","window","__GRN","ready","SteamAuth","userSteam64","onAuthenticatedCallbacks","hasBeenAuthenticated","handleProfileDataForUserAvailable","userDataString","awaitModulePrepared","Debug","writeConsoleMessage","LOG_LEVEL_INFO","i","j","length","handleRunCallback","handleProfileDataForUserUnableToBeResolved","error","LOG_LEVEL_ERROR","writeConsoleObject","bind","this","handleUpdateNavToRequiresAuthentication","document","querySelector","classList","remove","handleFetchUserProfileData","localStorage","setItem","Date","now","userDataStr","getItem","parts","split","splice","join","fetch","currentUserSteam32","cache","then","response","text","responseText","catch","handleUpdateNavToAuthenticated","__init","getElementById","setAttribute","encodeURIComponent","location","origin","pathname","steamAuthChallenge","indexOf","identity","URL","searchParamValue","replace","steamAuthSet","e","registerOnAuthenticatedCallback","callback","push","Number","toString","currentUserSteam64","modulePrepared","moduleReady"],"mappings":"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","file":"SteamAuth.js","sourcesContent":["!(function() {\n    var rootObjectName = window.__GRN;\n\n    window[rootObjectName].ready(function() {\n        window[rootObjectName].SteamAuth = (function () {\n            var userSteam64              = 0;\n            var userSteamProfileData     = null;\n            var onAuthenticatedCallbacks = [];\n            var hasBeenAuthenticated     = false;\n            var apiKey                   = '0FA551D64997BEF92A8FC8CBB1ECBA2B'; // TODO: Shouldn't this be linked to the main OAA account instead of mine?\n\n            var handleUpdateNavToAuthenticated = function() {\n                if (!userSteam64) {\n                    handleUpdateNavToRequiresAuthentication();\n                }\n\n                window[rootObjectName].awaitModulePrepared('Debug', function() {\n                    window[rootObjectName].Debug.writeConsoleMessage('User is currently authenticated', 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_INFO);\n                });\n\n                hasBeenAuthenticated = true;\n\n                // Now build the profile display for the user and do highlighting in the DOM\n                // TODO: Maybe we should use an internal proxy instead of a service that might disappear?\n                var userDataStr = window.localStorage.getItem('OAAGGSUP');\n\n                if (userDataStr) {\n                    var parts = userDataStr.split(':');\n                    var expiration = parts.splice(0, 1);\n\n                    if (expiration < Date.now()) {\n                        handleProfileDataForUserAvailable(parts.join(':'));\n                    }\n                }\n\n                // If we got here...userdata doesn't exist, so fetch it\n                window.fetch('https://chrisinajar.com:4969/users/' + window[rootObjectName].SteamAuth.currentUserSteam32, {\n                    cache: \"default\",\n                })\n                    .then(function(response) {\n                        response.text()\n                            .then(function(responseText) {\n                                window.localStorage.setItem('OAAGGSUP', (Date.now() + 604800000) + ':' + responseText);\n\n                                handleProfileDataForUserAvailable(responseText);\n                            })\n                            .catch(handleProfileDataForUserUnableToBeResolved)\n                    })\n                    .catch(handleProfileDataForUserUnableToBeResolved)\n            };\n\n            var handleProfileDataForUserAvailable = function(userDataString) {\n                // TODO: Populate DOM\n\n                window[rootObjectName].awaitModulePrepared('Debug', function() {\n                    window[rootObjectName].Debug.writeConsoleMessage('Running onAuthenticated callbacks', 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_INFO);\n                });\n\n                var i = 0;\n                var j = onAuthenticatedCallbacks.length;\n\n                for (i; i < j; i++) {\n                    window[rootObjectName].handleRunCallback(onAuthenticatedCallbacks[i]);\n                }\n            };\n\n            var handleProfileDataForUserUnableToBeResolved = function(error) {\n                window[rootObjectName].awaitModulePrepared('Debug', function(error) {\n                    window[rootObjectName].Debug.writeConsoleMessage('User profile data was unable to be fetched!', 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_ERROR);\n                    window[rootObjectName].Debug.writeConsoleObject(error, 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_ERROR);\n                }.bind(this, error));\n            };\n\n            var handleUpdateNavToRequiresAuthentication = function() {\n                window[rootObjectName].awaitModulePrepared('Debug', function() {\n                    window[rootObjectName].Debug.writeConsoleMessage('User is not currently authenticated', 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_INFO);\n                });\n\n                var authButton = document.querySelector('body>nav .steamAuth');\n\n                authButton.classList.remove('loading');\n\n                window[rootObjectName].awaitModulePrepared('Debug', function() {\n                    window[rootObjectName].Debug.writeConsoleMessage('Bound interactions for nav button for authentication', 'SteamAuth', window[rootObjectName].Debug.LOG_LEVEL_INFO);\n                });\n            };\n\n            var handleFetchUserProfileData = function() {\n                window.localStorage.setItem('OAAGGS64', (Date.now() + 604800000) + ':' + userSteam64);\n\n                // TODO: Check local cache and either use what is there if it exists and is valid, or fetch a new set of data\n                handleUpdateNavToAuthenticated();\n            };\n\n            return {\n                __init: function() {\n                    window[rootObjectName].awaitModulePrepared('URL', function() {\n                        // TL`DR, this sets up a browser-side 'session' flow where the response can be read from the URL\n                        document.getElementById('steamAuth').setAttribute(\n                            'href',\n                            'https://steamcommunity.com/openid/login?' +\n                                'openid.claimed_id=' + encodeURIComponent('http://specs.openid.net/auth/2.0/identifier_select') + '&' +\n                                'openid.identity='   + encodeURIComponent('http://specs.openid.net/auth/2.0/identifier_select') + '&' +\n                                'openid.mode='       + encodeURIComponent('checkid_setup') +                                      '&' +\n                                'openid.ns='         + encodeURIComponent('http://specs.openid.net/auth/2.0') +                   '&' +\n                                'openid.realm='      + encodeURIComponent(window.location.origin) +                               '&' +\n                                'openid.return_to='  + encodeURIComponent(window.location.origin + window.location.pathname)\n                        );\n\n                        // FIRST, check to see if our LS store has a valid entry that has not expired (We are going to locally store the Steam64 for 1 week)\n                        try {\n                            var steamAuthChallenge = window.localStorage.getItem('OAAGGS64');\n\n                            // Do we have a valid and non-expired Steam64 in cache?\n                            if (!steamAuthChallenge || (!steamAuthChallenge.indexOf(':') > -1)) {\n                                // Check our response URL...we might already have this data available\n                                var identity = window[rootObjectName].URL.searchParamValue('openid.identity');\n\n                                if (identity && (identity = identity.replace(/^https:\\/\\/steamcommunity.com\\/openid\\/id\\//, ''))) {\n                                    userSteam64 = identity;\n\n                                    handleFetchUserProfileData();\n                                } else {\n                                    handleUpdateNavToRequiresAuthentication();\n                                }\n                            } else {\n                                var steamAuthSet = steamAuthChallenge.split(':');\n\n                                if (steamAuthSet[0] < Date.now()) {\n                                    userSteam64 = steamAuthSet[1];\n\n                                    handleUpdateNavToRequiresAuthentication();\n                                } else {\n                                    handleFetchUserProfileData();\n                                }\n                            }\n                        } catch (e) {\n                            // TODO: Handle private browsing mode maybe?  IOS throws an exception here if we are in private browsing mode\n                        }\n                    });\n                }.bind(this),\n\n                registerOnAuthenticatedCallback: function(callback) {\n                    if (hasBeenAuthenticated) {\n                        window[rootObjectName].handleRunCallback(callback);\n                    } else {\n                        onAuthenticatedCallbacks.push(callback);\n                    }\n                }.bind(this),\n\n                get currentUserSteam32() {\n                    return (Number(userSteam64) - 76561197960265728).toString();\n                },\n\n                get currentUserSteam64() {\n                    return userSteam64;\n                },\n            };\n        }());\n\n        window[rootObjectName].modulePrepared('SteamAuth');\n        window[rootObjectName].moduleReady(window[rootObjectName].SteamAuth.__init);\n    });\n}());\n"]}